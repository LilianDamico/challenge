# Workflow ajustado para Maven e Deploy no Render
name: Maven Package and Render Deployment

on:
  release:
    types: [created]

jobs:
  build-and-deploy:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    # 1. Checkout do código
    - uses: actions/checkout@v4

    # 2. Configuração do JDK 17
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        server-id: github
        settings-path: ${{ github.workspace }}

    # 3. Construção do JAR com Maven
    - name: Build with Maven
      run: mvn -B clean package --file pom.xml

    # 4. Construção e publicação para o GitHub Packages
    - name: Publish to GitHub Packages Apache Maven
      run: mvn deploy -s $GITHUB_WORKSPACE/settings.xml
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # 5. Login no Docker para o Render
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # 6. Construção da imagem Docker
    - name: Build Docker image
      run: docker build -t your-dockerhub-username/challenge:latest .

    # 7. Push da imagem Docker para o Docker Hub
    - name: Push Docker image
      run: docker push your-dockerhub-username/challenge:latest

    # 8. Notificar o Render para redeploy (opcional)
    - name: Trigger redeploy in Render
      run: |
        curl -X POST -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
        -H "Accept: application/json" \
        -H "Content-Type: application/json" \
        -d '{"serviceId": "YOUR_RENDER_SERVICE_ID"}' \
        https://api.render.com/v1/services/YOUR_RENDER_SERVICE_ID/deploys
